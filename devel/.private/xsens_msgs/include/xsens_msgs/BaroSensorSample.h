// Generated by gencpp from file xsens_msgs/BaroSensorSample.msg
// DO NOT EDIT!


#ifndef XSENS_MSGS_MESSAGE_BAROSENSORSAMPLE_H
#define XSENS_MSGS_MESSAGE_BAROSENSORSAMPLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace xsens_msgs
{
template <class ContainerAllocator>
struct BaroSensorSample_
{
  typedef BaroSensorSample_<ContainerAllocator> Type;

  BaroSensorSample_()
    : height(0.0)  {
    }
  BaroSensorSample_(const ContainerAllocator& _alloc)
    : height(0.0)  {
  (void)_alloc;
    }



   typedef double _height_type;
  _height_type height;





  typedef boost::shared_ptr< ::xsens_msgs::BaroSensorSample_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xsens_msgs::BaroSensorSample_<ContainerAllocator> const> ConstPtr;

}; // struct BaroSensorSample_

typedef ::xsens_msgs::BaroSensorSample_<std::allocator<void> > BaroSensorSample;

typedef boost::shared_ptr< ::xsens_msgs::BaroSensorSample > BaroSensorSamplePtr;
typedef boost::shared_ptr< ::xsens_msgs::BaroSensorSample const> BaroSensorSampleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xsens_msgs::BaroSensorSample_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xsens_msgs::BaroSensorSample_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xsens_msgs::BaroSensorSample_<ContainerAllocator1> & lhs, const ::xsens_msgs::BaroSensorSample_<ContainerAllocator2> & rhs)
{
  return lhs.height == rhs.height;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xsens_msgs::BaroSensorSample_<ContainerAllocator1> & lhs, const ::xsens_msgs::BaroSensorSample_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xsens_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::xsens_msgs::BaroSensorSample_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xsens_msgs::BaroSensorSample_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xsens_msgs::BaroSensorSample_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xsens_msgs::BaroSensorSample_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xsens_msgs::BaroSensorSample_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xsens_msgs::BaroSensorSample_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xsens_msgs::BaroSensorSample_<ContainerAllocator> >
{
  static const char* value()
  {
    return "689e59833d9760375d61a82ed395adaf";
  }

  static const char* value(const ::xsens_msgs::BaroSensorSample_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x689e59833d976037ULL;
  static const uint64_t static_value2 = 0x5d61a82ed395adafULL;
};

template<class ContainerAllocator>
struct DataType< ::xsens_msgs::BaroSensorSample_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xsens_msgs/BaroSensorSample";
  }

  static const char* value(const ::xsens_msgs::BaroSensorSample_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xsens_msgs::BaroSensorSample_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This is a message to hold data from a baro \n"
"\n"
"float64 height\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::xsens_msgs::BaroSensorSample_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xsens_msgs::BaroSensorSample_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BaroSensorSample_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xsens_msgs::BaroSensorSample_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xsens_msgs::BaroSensorSample_<ContainerAllocator>& v)
  {
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XSENS_MSGS_MESSAGE_BAROSENSORSAMPLE_H
